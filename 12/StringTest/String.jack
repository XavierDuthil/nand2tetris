// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
    field int length;
    field int maxLength;
    field Array baseArray;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        
        let baseArray = Array.new(maxLength);
        let length = 0;
        let maxLength = maxLength;
        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
        do Memory.deAlloc(baseArray);
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this String. */
    method int length() {
        return length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
        return baseArray[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
        let baseArray[j] = c;
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
        let baseArray[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
        var int result, index;
        let result = 0;
        let index = 0;

        while (baseArray[index] > 47 & baseArray[index] < 58 & index < length) {
            let result = result * 10 + baseArray[index] - 48;
            let index = index + 1;
        }

        return result;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
        var int magnitude, copyOfNumber;
        let copyOfNumber = number;
        let magnitude = 1;
        let length = 0;

        while (copyOfNumber > 9) {
            let copyOfNumber = copyOfNumber / 10;
            let magnitude = magnitude * 10;
        }

        while (magnitude > 0) {
            do appendChar(number / magnitude);
            let number = number - ((number / magnitude) * magnitude);
            let magnitude = magnitude / 10;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 10;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 8;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
