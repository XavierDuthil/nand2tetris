function Main.main 2
push constant 0
pop local 0
push constant 0
pop local 1
push constant 8001
push constant 16
push constant 0
push constant 1
sub
call Main.fillMemory 3
push constant 8000
call Memory.peek 1
pop local 1
push local 1
call Main.convert 1
return

function Main.convert 3
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 2
push constant 1
pop local 2

// While loop
label WHILE_LOOP1
push local 2

// Test if condition result is 'false'
push constant 0
eq
if-goto WHILE_END1

push local 1
push constant 1
add
pop local 1
push local 0
call Main.nextMask 1
pop local 0
push constant 9000
push local 1
add
push local 0
call Memory.poke 2
push local 1
push constant 16
gt
not

// Test if condition result is 'false'
push constant 0
eq
if-goto IF_FALSE2

push argument 0
push local 0
and
push constant 0
eq
not

// Test if condition result is 'false'
push constant 0
eq
if-goto IF_FALSE3

push constant 8000
push local 1
add
push constant 1
call Memory.poke 2
goto IF_END3
label IF_FALSE3
push constant 8000
push local 1
add
push constant 0
call Memory.poke 2
label IF_END3
goto IF_END2
label IF_FALSE2
push constant 0
pop local 2
label IF_END2

goto WHILE_LOOP1
label WHILE_END1
return

function Main.nextMask 0
push argument 0
push constant 0
eq

// Test if condition result is 'false'
push constant 0
eq
if-goto IF_FALSE4

push constant 1
return

goto IF_END4
label IF_FALSE4
push argument 0
push constant 2
// We already have the 2 operands in the stack, we store them in temp0 and temp1
pop temp 0
pop temp 1

// Result initialisation
push constant 0

// Loop
label MULTIPLICATION_LOOP5

    // Counter decrement
    push temp 1
    push constant 1
    sub
    pop temp 1

    // Verify loop condition: until counter < 0
    push temp 1
    push constant 0
    lt
    if-goto MULTIPLICATION_END5

    // Add first term value
    push temp 0
    add

    goto MULTIPLICATION_LOOP5

label MULTIPLICATION_END5
return

label IF_END4
function Main.fillMemory 0

// While loop
label WHILE_LOOP6
push argument 1
push constant 0
gt

// Test if condition result is 'false'
push constant 0
eq
if-goto WHILE_END6

push argument 0
push argument 2
call Memory.poke 2
push argument 1
push constant 1
sub
pop argument 1
push argument 0
push constant 1
add
pop argument 0

goto WHILE_LOOP6
label WHILE_END6
return
